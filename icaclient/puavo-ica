#!/bin/sh

set -eu

check_response() {
  local result
  result=$(
    printf "%s\n" "$1" \
      | jq '.status == "success"
              and (.data.license.username|type) == "string"
              and .data.license.username != ""
              and (.data.license.password|type) == "string"
              and .data.license.password != ""')
  [ "$result" = 'true' ]
}

get_citrix_id() {
  local citrix_id_cache_path citrix_json curl_max_time puavo_dir \
        rest_response url username

  puavo_dir="${HOME}/.puavo"

  citrix_id_cache_path="${puavo_dir}/citrix_id.json"
  curl_max_time=60

  if [ -e "$citrix_id_cache_path" ]; then
    curl_max_time=4
  fi

  username=$(id -nu)
  url="/v3/users/${username}/citrix"
  if ! rest_response=$(puavo-rest-request "$url" --user-krb --writable -- \
                         --max-time "$curl_max_time"); then
    echo 'puavo-rest error' >&2
    if [ ! -e "$citrix_id_cache_path" ]; then
      echo "exiting (no citrix id cache)" >&2
      exit 1
    fi
    citrix_json=''
  elif ! check_response "$rest_response"; then
    echo "received citrix id response is not valid: ${rest_response}" >&2
    if [ ! -e "$citrix_id_cache_path" ]; then
      echo 'exiting (no citrix id cache)' >&2
      exit 1
    fi
    citrix_json=''
  else
    echo 'fetched citrix id from puavo-rest'
    mkdir -p "$puavo_dir"
    citrix_json=$(printf "%s\n" "$rest_response" | jq .data)
    install -m 600 /dev/null "${citrix_id_cache_path}.tmp"
    printf "%s\n" "$citrix_json" > "${citrix_id_cache_path}.tmp"
    mv "${citrix_id_cache_path}.tmp" "$citrix_id_cache_path"
  fi

  if [ -z "$citrix_json" ]; then
    echo 'using citrix id cache'
    citrix_json="$(cat "$citrix_id_cache_path")"
  fi

  # global variables
  citrix_id="$(      printf "%s\n" "$citrix_json" | jq -r .license.username)"
  citrix_password="$(printf "%s\n" "$citrix_json" | jq -r .license.password)"
}

app=${1:-}

# XXX $citrix_id and $citrix_password not yet used for anything
get_citrix_id

server=$(puavo-conf puavo.pkg.icaclient.server)
if [ -z "$server" ]; then
  echo 'puavo-conf variable puavo.pkg.icaclient.server not set' >&2
  exit 1
fi

service=$(puavo-conf puavo.pkg.icaclient.service)
if [ -z "$service" ]; then
  echo 'puavo-conf variable puavo.pkg.icaclient.service not set' >&2
  exit 1
fi

get_discovery_url() {
  local awk_script discovery_url storebrowse_output

  # use a variable because of a need to use "'"-character in script
  awk_script=$(cat <<'AWK_EOF'
    $2 == ("'" service "'") {
      split($5, a, /,/)
      sub(/'$/, "", a[2])
      if (a[2] == ("https://" server "/")) {
	sub(/^'/, "", $1)
	sub(/'$/, "", $1)
        print $1
        exit(0)
      }
    }
AWK_EOF
)

  /opt/Citrix/ICAClient/util/storebrowse -l \
    | awk -F "\t" -v server="$server" -v service="$service" "$awk_script"
}

add_store() {
  local store
  store="${server}?${service}"
  /opt/Citrix/ICAClient/util/storebrowse -a "$store" > /dev/null
}

list_available_apps() {
  xml_grep --strict --text_only resource/id \
           ~/.ICAClient/cache/Stores/Apps\ Cache\ *.ctx 2>/dev/null
}

setup_wfclient_ini() {
  awk '
    /^HDXH264InputEnabled=/ {
      print
      print "DriveEnabledP=True"
      print "DriveWriteAccessP=0"
      print "DriveReadAccessP=0"
      print "DrivePathP=$HOME/"
      next
    }
    { print }
  ' /opt/Citrix/ICAClient/config/wfclient.template \
    > ~/.ICAClient/wfclient.ini.tmp
  mv ~/.ICAClient/wfclient.ini.tmp ~/.ICAClient/wfclient.ini
}

discovery_url=$(get_discovery_url)
if [ -z "$discovery_url" ]; then
  if ! add_store; then
    echo 'add store returned failure' >&2
    exit 1
  fi
fi

discovery_url=$(get_discovery_url)
if [ -z "$discovery_url" ]; then
  echo 'could not determine the discovery url' >&2
  exit 1
fi

# enforce client configuration
setup_wfclient_ini

if [ -n "$app" ]; then
  if available_apps=$(list_available_apps); then
    # try first looking for an exact match
    app_id=$(printf %s "$available_apps" | grep -Fix -m 1 "$app") || true

    # then try with a fuzzier match if there was no exact match
    if [ -z "$app_id" ]; then
      app_id=$(printf %s "$available_apps" | grep -Fi -m 1 "$app") || true
    fi

    if [ -n "$app_id" ]; then
      # found an app, start that one
      exec /opt/Citrix/ICAClient/util/storebrowse -L "$app_id" \
           "$discovery_url"
    fi
  fi
fi

# fallback to menu
exec /opt/Citrix/ICAClient/selfservice
